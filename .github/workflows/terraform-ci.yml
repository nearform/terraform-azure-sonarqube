name: Terraform Checks
on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  terraform:
    name: Terraform Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: read
      checks: write
      pull-requests: write
    env:
      TF_LOG: WARN
      TF_IN_AUTOMATION: true
      TF_WORK_DIR: ${{ github.workspace }}/examples/default
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Login to Azure 🔐
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "~1.9.0"

      - name: Terraform Init
        id: init
        run: |
          terraform -chdir=${{ env.TF_WORK_DIR }} init

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=${{ env.TF_WORK_DIR }} fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ env.TF_WORK_DIR }} validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform -chdir=${{ env.TF_WORK_DIR }} plan -no-color -input=false -out=tfplan
        continue-on-error: true
        env:
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Publish Plan Results in PR comment
        uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Install terraform-compliance
        run: |
          python -m pip install --upgrade pip
          pip install --break-system-packages terraform-compliance

      - name: Run BDD tests
        run: |
          cd ${{ env.TF_WORK_DIR }}
          terraform-compliance -f ${{ github.workspace }}/features -p tfplan 2>&1 | grep -v -E 'DeprecationWarning|datetime|WARNING'
